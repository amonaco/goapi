// api v0.0.1 ca5eebb31b5c36c2b9324455ea29be5d484f89dc
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/javascript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "ca5eebb31b5c36c2b9324455ea29be5d484f89dc"


//
// Types
//

export class Status {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['success'] = _data['success']
      this._data['error'] = _data['error']
      this._data['id'] = _data['id']
      
    }
  }
  get success() {
    return this._data['success']
  }
  set success(value) {
    this._data['success'] = value
  }
  get error() {
    return this._data['error']
  }
  set error(value) {
    this._data['error'] = value
  }
  get id() {
    return this._data['id']
  }
  set id(value) {
    this._data['id'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class Credentials {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['email'] = _data['email']
      this._data['password'] = _data['password']
      this._data['roles'] = _data['roles']
      this._data['company_id'] = _data['company_id']
      
    }
  }
  get email() {
    return this._data['email']
  }
  set email(value) {
    this._data['email'] = value
  }
  get password() {
    return this._data['password']
  }
  set password(value) {
    this._data['password'] = value
  }
  get roles() {
    return this._data['roles']
  }
  set roles(value) {
    this._data['roles'] = value
  }
  get company_id() {
    return this._data['company_id']
  }
  set company_id(value) {
    this._data['company_id'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class PasswordToken {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['password'] = _data['password']
      this._data['token'] = _data['token']
      
    }
  }
  get password() {
    return this._data['password']
  }
  set password(value) {
    this._data['password'] = value
  }
  get token() {
    return this._data['token']
  }
  set token(value) {
    this._data['token'] = value
  }
  
  toJSON() {
    return this._data
  }
}

  
//
// Client
//

export class AuthService {
  constructor(hostname, fetch) {
    this.path = '/rpc/AuthService/'
    this.hostname = hostname
    this.fetch = fetch
  }

  url(name) {
    return this.hostname + this.path + name
  }
  
  login = (args, headers) => {
    return this.fetch(
      this.url('Login'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          authToken: (_data.authToken)
        }
      })
    })
  }
  
  logout = (args, headers) => {
    return this.fetch(
      this.url('Logout'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: new Status(_data.status)
        }
      })
    })
  }
  
  setPassword = (args, headers) => {
    return this.fetch(
      this.url('SetPassword'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: new Status(_data.status)
        }
      })
    })
  }
  
  forgotPassword = (args, headers) => {
    return this.fetch(
      this.url('ForgotPassword'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
        }
      })
    })
  }
  
}

  
const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res) => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status }
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}
