/**
 * /* tslint:disable
 *
 * @format
 */

// api v1.0.0 d1b9bfe4ef19f5293793e36f3a886b85d4aead07
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1";

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v1.0.0";

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "d1b9bfe4ef19f5293793e36f3a886b85d4aead07";

//
// Types
//
export interface Response {
  success: boolean;
  error: string;
  id: number;
  filename: string;
}

export interface WebRPCError extends Error {
  code: string;
  msg: string;
  status: number;
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: "POST",
    headers: { ...headers, "Content-Type": "application/json" },
    body: JSON.stringify(body || {})
  };
};

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data;
    try {
      data = JSON.parse(text);
    } catch (err) {
      throw {
        code: "unknown",
        msg: `expecting JSON, got: ${text}`,
        status: res.status
      } as WebRPCError;
    }
    if (!res.ok) {
      throw data; // webrpc error response
    }
    return data;
  });
};

export type Fetch = (
  input: RequestInfo,
  init?: RequestInit
) => Promise<Response>;
