/**
 * /* tslint:disable
 *
 * @format
 */

// api v0.0.1 332ceb1419a8a1c2a3b1d96dbf5bbbdf2ec883a2
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1";

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1";

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "332ceb1419a8a1c2a3b1d96dbf5bbbdf2ec883a2";

//
// Types
//
export interface User {
  id: string;
  email: string;
}

export interface CredentialsUpdate {
  oldPassword: string;
  newPassword: string;
}

export interface Status {
  status: number;
  message: string;
}

export interface UsersService {
  get(args: GetArgs, headers?: object): Promise<GetReturn>;
  update(args: UpdateArgs, headers?: object): Promise<UpdateReturn>;
  changePassword(
    args: ChangePasswordArgs,
    headers?: object
  ): Promise<ChangePasswordReturn>;
}

export interface GetArgs {
  userID: string;
}

export interface GetReturn {
  result: User;
}
export interface UpdateArgs {
  user: User;
}

export interface UpdateReturn {
  result: Status;
}
export interface ChangePasswordArgs {
  update: CredentialsUpdate;
}

export interface ChangePasswordReturn {
  result: Status;
}

//
// Client
//
export class UsersService implements UsersService {
  private hostname: string;
  private fetch: Fetch;
  private path = "/rpc/UsersService/";

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname;
    this.fetch = fetch;
  }

  private url(name: string): string {
    return this.hostname + this.path + name;
  }

  get = (args: GetArgs, headers?: object): Promise<GetReturn> => {
    return this.fetch(this.url("Get"), createHTTPRequest(args, headers)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            result: <User>_data.result
          };
        });
      }
    );
  };

  update = (args: UpdateArgs, headers?: object): Promise<UpdateReturn> => {
    return this.fetch(
      this.url("Update"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          result: <Status>_data.result
        };
      });
    });
  };

  changePassword = (
    args: ChangePasswordArgs,
    headers?: object
  ): Promise<ChangePasswordReturn> => {
    return this.fetch(
      this.url("ChangePassword"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          result: <Status>_data.result
        };
      });
    });
  };
}

export interface WebRPCError extends Error {
  code: string;
  msg: string;
  status: number;
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: "POST",
    headers: { ...headers, "Content-Type": "application/json" },
    body: JSON.stringify(body || {})
  };
};

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data;
    try {
      data = JSON.parse(text);
    } catch (err) {
      throw {
        code: "unknown",
        msg: `expecting JSON, got: ${text}`,
        status: res.status
      } as WebRPCError;
    }
    if (!res.ok) {
      throw data; // webrpc error response
    }
    return data;
  });
};

export type Fetch = (
  input: RequestInfo,
  init?: RequestInit
) => Promise<Response>;
