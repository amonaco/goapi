/**
 * /* tslint:disable
 *
 * @format
 */

// api v0.0.1 96ca8092ec9d42ccc904c11c02319b3c5e1be0a1
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1";

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1";

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "96ca8092ec9d42ccc904c11c02319b3c5e1be0a1";

//
// Types
//
export interface Sector {
  id: string;
  name: string;
  building: string;
  blueprints: string;
}

export interface Building {
  id: string;
  name: string;
  zipCode: string;
  startedOn: string;
  image: string;
  progress: string;
  sectors: Array<Sector>;
}

export interface BuildingsService {
  getBuilding(
    args: GetBuildingArgs,
    headers?: object
  ): Promise<GetBuildingReturn>;
  createBuilding(
    args: CreateBuildingArgs,
    headers?: object
  ): Promise<CreateBuildingReturn>;
  getSector(args: GetSectorArgs, headers?: object): Promise<GetSectorReturn>;
  createSector(headers?: object): Promise<CreateSectorReturn>;
}

export interface GetBuildingArgs {
  buildingID: string;
}

export interface GetBuildingReturn {
  building: Building;
}
export interface CreateBuildingArgs {
  building: Building;
}

export interface CreateBuildingReturn {
  building: Building;
}
export interface GetSectorArgs {
  sectorID: string;
}

export interface GetSectorReturn {
  sector: Sector;
}
export interface CreateSectorArgs {}

export interface CreateSectorReturn {
  sector: Sector;
}

//
// Client
//
export class BuildingsService implements BuildingsService {
  private hostname: string;
  private fetch: Fetch;
  private path = "/rpc/BuildingsService/";

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname;
    this.fetch = fetch;
  }

  private url(name: string): string {
    return this.hostname + this.path + name;
  }

  getBuilding = (
    args: GetBuildingArgs,
    headers?: object
  ): Promise<GetBuildingReturn> => {
    return this.fetch(
      this.url("GetBuilding"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          building: <Building>_data.building
        };
      });
    });
  };

  createBuilding = (
    args: CreateBuildingArgs,
    headers?: object
  ): Promise<CreateBuildingReturn> => {
    return this.fetch(
      this.url("CreateBuilding"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          building: <Building>_data.building
        };
      });
    });
  };

  getSector = (
    args: GetSectorArgs,
    headers?: object
  ): Promise<GetSectorReturn> => {
    return this.fetch(
      this.url("GetSector"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          sector: <Sector>_data.sector
        };
      });
    });
  };

  createSector = (headers?: object): Promise<CreateSectorReturn> => {
    return this.fetch(
      this.url("CreateSector"),
      createHTTPRequest({}, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          sector: <Sector>_data.sector
        };
      });
    });
  };
}

export interface WebRPCError extends Error {
  code: string;
  msg: string;
  status: number;
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: "POST",
    headers: { ...headers, "Content-Type": "application/json" },
    body: JSON.stringify(body || {})
  };
};

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data;
    try {
      data = JSON.parse(text);
    } catch (err) {
      throw {
        code: "unknown",
        msg: `expecting JSON, got: ${text}`,
        status: res.status
      } as WebRPCError;
    }
    if (!res.ok) {
      throw data; // webrpc error response
    }
    return data;
  });
};

export type Fetch = (
  input: RequestInfo,
  init?: RequestInit
) => Promise<Response>;
