/* tslint:disable */
// api v0.0.1 268831ec79ad41c6f6fff6d70ae0833650569b51
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "268831ec79ad41c6f6fff6d70ae0833650569b51"


//
// Types
//
export interface Status {
  success: boolean
  error: string
  id: number
  message: string
}

export interface User {
  id?: number
  company_id: number
  uuid?: string
  sector_id?: number
  email: string
  address: string
  phone: string
  name: string
  lastname: string
  roles?: Array<string>
  status?: string
}

export interface UserService {
  get(args: GetArgs, headers?: object): Promise<GetReturn>
  getAll(headers?: object): Promise<GetAllReturn>
  createEditorUser(args: CreateEditorUserArgs, headers?: object): Promise<CreateEditorUserReturn>
  update(args: UpdateArgs, headers?: object): Promise<UpdateReturn>
  getCurrent(headers?: object): Promise<GetCurrentReturn>
  getByUUID(args: GetByUUIDArgs, headers?: object): Promise<GetByUUIDReturn>
}

export interface GetArgs {
  id: number
}

export interface GetReturn {
  result: User  
}
export interface GetAllArgs {
}

export interface GetAllReturn {
  result: Array<User>  
}
export interface CreateEditorUserArgs {
  user: User
}

export interface CreateEditorUserReturn {
  status: Status  
}
export interface UpdateArgs {
  user: User
}

export interface UpdateReturn {
  status: Status  
}
export interface GetCurrentArgs {
}

export interface GetCurrentReturn {
  result: User  
}
export interface GetByUUIDArgs {
  uuid: string
}

export interface GetByUUIDReturn {
  result: User  
}


  
//
// Client
//
export class UserService implements UserService {
  private hostname: string
  private fetch: Fetch
  private path = '/rpc/UserService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  get = (args: GetArgs, headers?: object): Promise<GetReturn> => {
    return this.fetch(
      this.url('Get'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          result: <User>(_data.result)
        }
      })
    })
  }
  
  getAll = (headers?: object): Promise<GetAllReturn> => {
    return this.fetch(
      this.url('GetAll'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          result: <Array<User>>(_data.result)
        }
      })
    })
  }
  
  createEditorUser = (args: CreateEditorUserArgs, headers?: object): Promise<CreateEditorUserReturn> => {
    return this.fetch(
      this.url('CreateEditorUser'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <Status>(_data.status)
        }
      })
    })
  }
  
  update = (args: UpdateArgs, headers?: object): Promise<UpdateReturn> => {
    return this.fetch(
      this.url('Update'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <Status>(_data.status)
        }
      })
    })
  }
  
  getCurrent = (headers?: object): Promise<GetCurrentReturn> => {
    return this.fetch(
      this.url('GetCurrent'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          result: <User>(_data.result)
        }
      })
    })
  }
  
  getByUUID = (args: GetByUUIDArgs, headers?: object): Promise<GetByUUIDReturn> => {
    return this.fetch(
      this.url('GetByUUID'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          result: <User>(_data.result)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
