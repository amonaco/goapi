/* tslint:disable */
// api v0.0.1 c95ea93aa999cc2dd86f46463befe362cc6d053d
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "c95ea93aa999cc2dd86f46463befe362cc6d053d"


//
// Types
//
export interface Status {
  success: boolean
  error: string
  id: number
  message: string
}

export interface Coordinates {
  x: number
  y: number
  z?: number
}

export interface MessageData {
  to: string
  from: string
  body: string
  document_id?: number
  floorplan_id?: number
  coordinates: Coordinates
}

export interface Message {
  id?: number
  data: MessageData
}

export interface MessageService {
  get(args: GetArgs, headers?: object): Promise<GetReturn>
  create(args: CreateArgs, headers?: object): Promise<CreateReturn>
  update(args: UpdateArgs, headers?: object): Promise<UpdateReturn>
  remove(args: RemoveArgs, headers?: object): Promise<RemoveReturn>
  getConversation(args: GetConversationArgs, headers?: object): Promise<GetConversationReturn>
}

export interface GetArgs {
  id: number
}

export interface GetReturn {
  result: Message  
}
export interface CreateArgs {
  message: Message
}

export interface CreateReturn {
  status: Status  
}
export interface UpdateArgs {
  message: Message
}

export interface UpdateReturn {
  status: Status  
}
export interface RemoveArgs {
  id: number
}

export interface RemoveReturn {
  status: Status  
}
export interface GetConversationArgs {
  id: number
}

export interface GetConversationReturn {
  result: Array<Message>  
}


  
//
// Client
//
export class MessageService implements MessageService {
  private hostname: string
  private fetch: Fetch
  private path = '/rpc/MessageService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  get = (args: GetArgs, headers?: object): Promise<GetReturn> => {
    return this.fetch(
      this.url('Get'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          result: <Message>(_data.result)
        }
      })
    })
  }
  
  create = (args: CreateArgs, headers?: object): Promise<CreateReturn> => {
    return this.fetch(
      this.url('Create'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <Status>(_data.status)
        }
      })
    })
  }
  
  update = (args: UpdateArgs, headers?: object): Promise<UpdateReturn> => {
    return this.fetch(
      this.url('Update'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <Status>(_data.status)
        }
      })
    })
  }
  
  remove = (args: RemoveArgs, headers?: object): Promise<RemoveReturn> => {
    return this.fetch(
      this.url('Remove'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <Status>(_data.status)
        }
      })
    })
  }
  
  getConversation = (args: GetConversationArgs, headers?: object): Promise<GetConversationReturn> => {
    return this.fetch(
      this.url('GetConversation'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          result: <Array<Message>>(_data.result)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
